mutate(Lab_Level = case_when(
Lab_Level == 'Intro-Algebra' ~ 'FY.Alg',
Lab_Level == 'Intro-Calculus' ~ 'FY.Calc',
(Lab_Level == 'Sophomore') | (Lab_Level == 'Junior') | (Lab_Level == 'Senior') ~ 'BFY',
TRUE ~ NA_character_
),
Lab_Purpose = case_when(
Lab_Purpose == 'Both about equally' ~ 'Both',
Lab_Purpose == 'Develop lab skills' ~ 'Skills',
Lab_Purpose == 'Reinforce physics concepts' ~ 'Concepts',
TRUE ~ NA_character_
))
print('Total # of students in dataset...')
nrow(full.df)
print('Total # of classes in dataset...')
length(unique(full.df$Class_ID))
print('Total # of institutions in dataset..')
length(unique(full.df$School))
# Remove whole classes without goal and/or level information or that were only administered at pre or post
full.df <- data.table(full.df)[, `:=`(N.students = .N, pre.rate = sum(Survey_x == 'C')/.N,
post.rate = sum(Survey_y == 'C')/.N),  .(Class_ID)]
full.df <- full.df %>%
filter(!is.na(Lab_Level) & !is.na(Lab_Purpose) & (pre.rate > 0) & (post.rate > 0))
print('# of remaining students in full dataset...')
nrow(full.df)
print('# of remaining classes in full dataset...')
length(unique(full.df$Class_ID))
print('Total # of institutions in dataset..')
length(unique(full.df$School))
df.matched <- full.df %>%
filter(!is.na(PreScores) & !is.na(PostScores))
print('# of students in matched dataset...')
nrow(df.matched)
print('# of classes in matched dataset...')
length(unique(df.matched$Class_ID))
print('Total # of institutions in dataset..')
length(unique(df.matched$School))
table(df.matched[!duplicated(df.matched$School),]$Institution_Type, exclude = NULL)
table(df.matched[!duplicated(df.matched$Class_ID),]$Lab_Level, exclude = NULL)
table(df.matched[!duplicated(df.matched$Class_ID),]$Lab_Purpose, exclude = NULL)
colSums(df.matched[, c('Q6f_1_y', 'Q6f_3_y', 'Q6f_5_y', 'Q6f_7_y')], na.rm = TRUE)
full.df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
Merge.CIS(., Matched = TRUE) %>%
filter(Survey_x == 'C' | Survey_y == 'C') %>%
mutate(Lab_Level = case_when(
Lab_Level == 'Intro-Algebra' ~ 'FY.Alg',
Lab_Level == 'Intro-Calculus' ~ 'FY.Calc',
(Lab_Level == 'Sophomore') | (Lab_Level == 'Junior') | (Lab_Level == 'Senior') ~ 'BFY',
TRUE ~ NA_character_
),
Lab_Purpose = case_when(
Lab_Purpose == 'Both about equally' ~ 'Both',
Lab_Purpose == 'Develop lab skills' ~ 'Skills',
Lab_Purpose == 'Reinforce physics concepts' ~ 'Concepts',
TRUE ~ NA_character_
))
print('Total # of students in dataset...')
nrow(full.df)
print('Total # of classes in dataset...')
length(unique(full.df$Class_ID))
print('Total # of institutions in dataset..')
length(unique(full.df$School))
table(df.full[!duplicated(df.full$School),]$Institution_Type, exclude = NULL)
full.df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
Merge.CIS(., Matched = TRUE) %>%
filter(Survey_x == 'C' | Survey_y == 'C') %>%
mutate(Lab_Level = case_when(
Lab_Level == 'Intro-Algebra' ~ 'FY.Alg',
Lab_Level == 'Intro-Calculus' ~ 'FY.Calc',
(Lab_Level == 'Sophomore') | (Lab_Level == 'Junior') | (Lab_Level == 'Senior') ~ 'BFY',
TRUE ~ NA_character_
),
Lab_Purpose = case_when(
Lab_Purpose == 'Both about equally' ~ 'Both',
Lab_Purpose == 'Develop lab skills' ~ 'Skills',
Lab_Purpose == 'Reinforce physics concepts' ~ 'Concepts',
TRUE ~ NA_character_
))
print('Total # of students in dataset...')
nrow(full.df)
print('Total # of classes in dataset...')
length(unique(full.df$Class_ID))
print('Total # of institutions in dataset..')
length(unique(full.df$School))
table(full.df[!duplicated(full.df$School),]$Institution_Type, exclude = NULL)
table(full.df[!duplicated(full.df$Class_ID),]$Lab_Level, exclude = NULL)
table(full.df[!duplicated(full.df$Class_ID),]$Lab_Purpose, exclude = NULL)
# Remove whole classes without goal and/or level information or that were only administered at pre or post
full.df <- data.table(full.df)[, `:=`(N.students = .N, pre.rate = sum(Survey_x == 'C')/.N,
post.rate = sum(Survey_y == 'C')/.N),  .(Class_ID)]
full.df <- full.df %>%
filter(!is.na(Lab_Level) & !is.na(Lab_Purpose) & (pre.rate > 0) & (post.rate > 0))
print('# of remaining students in full dataset...')
nrow(full.df)
print('# of remaining classes in full dataset...')
length(unique(full.df$Class_ID))
print('Total # of institutions in dataset..')
length(unique(full.df$School))
df.matched <- full.df %>%
filter(!is.na(PreScores) & !is.na(PostScores))
print('# of students in matched dataset...')
nrow(df.matched)
print('# of classes in matched dataset...')
length(unique(df.matched$Class_ID))
print('Total # of institutions in dataset..')
length(unique(df.matched$School))
table(df.matched[!duplicated(df.matched$School),]$Institution_Type, exclude = NULL)
table(df.matched[!duplicated(df.matched$Class_ID),]$Lab_Level, exclude = NULL)
table(df.matched[!duplicated(df.matched$Class_ID),]$Lab_Purpose, exclude = NULL)
colSums(df.matched[, c('Q6f_1_y', 'Q6f_3_y', 'Q6f_5_y', 'Q6f_7_y')], na.rm = TRUE)
full.df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat.csv') %>%
Merge.CIS(., Matched = TRUE) %>%
filter(Survey_x == 'C' | Survey_y == 'C') %>%
mutate(Lab_Level = case_when(
Lab_Level == 'Intro-Algebra' ~ 'FY.Alg',
Lab_Level == 'Intro-Calculus' ~ 'FY.Calc',
(Lab_Level == 'Sophomore') | (Lab_Level == 'Junior') | (Lab_Level == 'Senior') ~ 'BFY',
TRUE ~ NA_character_
),
Lab_Purpose = case_when(
Lab_Purpose == 'Both about equally' ~ 'Both',
Lab_Purpose == 'Develop lab skills' ~ 'Skills',
Lab_Purpose == 'Reinforce physics concepts' ~ 'Concepts',
TRUE ~ NA_character_
))
print('Total # of students in dataset...')
nrow(full.df)
print('Total # of classes in dataset...')
length(unique(full.df$Class_ID))
print('Total # of institutions in dataset..')
length(unique(full.df$School))
table(full.df[!duplicated(full.df$School),]$Institution_Type, exclude = NULL)
table(full.df[!duplicated(full.df$Class_ID),]$Lab_Level, exclude = NULL)
# Remove whole classes without goal and/or level information or that were only administered at pre or post
full.df <- data.table(full.df)[, `:=`(N.students = .N, pre.rate = sum(Survey_x == 'C')/.N,
post.rate = sum(Survey_y == 'C')/.N),  .(Class_ID)]
full.df <- full.df %>%
filter(!is.na(Lab_Level) & !is.na(Lab_Purpose) & (pre.rate > 0) & (post.rate > 0))
print('# of remaining students in full dataset...')
nrow(full.df)
print('# of remaining classes in full dataset...')
length(unique(full.df$Class_ID))
print('Total # of institutions in dataset..')
length(unique(full.df$School))
df.matched <- full.df %>%
filter(!is.na(PreScores) & !is.na(PostScores))
print('# of students in matched dataset...')
nrow(df.matched)
print('# of classes in matched dataset...')
length(unique(df.matched$Class_ID))
print('Total # of institutions in dataset..')
length(unique(df.matched$School))
table(df.matched[!duplicated(df.matched$School),]$Institution_Type, exclude = NULL)
table(df.matched[!duplicated(df.matched$Class_ID),]$Lab_Level, exclude = NULL)
table(df.matched[!duplicated(df.matched$Class_ID),]$Lab_Purpose, exclude = NULL)
colSums(df.matched[, c('Q6f_1_y', 'Q6f_3_y', 'Q6f_5_y', 'Q6f_7_y')], na.rm = TRUE)
library(tidyverse)
library(data.table)
library(BlandAltmanLeh)
library(lmerTest)
library(sjstats)
source('C:/Users/Cole/Documents/GitHub/PLIC/Process-Merge-Concat/PLIC_DataProcessing.R')
theme_set(theme_classic(base_size = 14))
full.df <- fread('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/Complete/Complete_Concat_CourseInfo.csv') %>%
filter(Survey_x == 'C' | Survey_y == 'C') # remove events with no CR surveys
# Remove FR scores
full.df[full.df$Survey_x == 'F', 'PreScores'] <- NA_real_
full.df[full.df$Survey_y == 'F', 'PostScores'] <- NA_real_
print('Total # of students in dataset...')
length(unique(full.df$anon_student_id))
print('Total # of institutions in dataset..')
length(unique(full.df$anon_institution_id))
print('Total # of courses in dataset...')
length(unique(full.df$anon_course_id))
print('Total # of courses in dataset...')
length(unique(full.df$Class_ID))
# Examine only unique institutions/courses
table(full.df[!duplicated(full.df$anon_institution_id),]$Institution_type, exclude = NULL)
table(full.df[!duplicated(full.df$anon_course_id),]$Lab_level, exclude = NULL)
table(full.df[!duplicated(full.df$Class_ID),]$Lab_level, exclude = NULL)
full.df <- Collapse.vars(full.df) # Creates new gender/race/major columns
# Get df of only unique students
distinct.df <- full.df[!duplicated(full.df$anon_student_id),]
# Get demographic breakdown of distinct datasets
table(distinct.df$Gender)/nrow(distinct.df) * 100
Race.ethnicity.table(distinct.df)
table(distinct.df$Major)/nrow(distinct.df) * 100
print('Total # of student records in dataset...')
nrow(full.df)
print('# of students that took the PLIC in two or more classes...')
length(unique(full.df[duplicated(full.df$anon_student_id), 'anon_student_id']))
# This dataframe contains valid surveys from students who took the PLIC two or more times
# at the same time (i.e., pre or post) for the same class
student.trt.df <- read.csv('C:/Users/Cole/Documents/PLIC_DATA/Collective_Surveys/DuplicatedSurveys.csv')
print('# of students with more than one measurement')
length(unique(student.trt.df$anon_student_id))
# Remove records with scores less than two sds below the mean of this dataset
cutoff <- mean(student.trt.df$TotalScores) - 2 * sd(student.trt.df$TotalScores)
cutoff
student.trt.df <- student.trt.df[student.trt.df$TotalScores > cutoff,]
# Get finish date data
student.trt.df$V4 <- as.POSIXct(as.character(student.trt.df$V4),
format="%Y-%m-%d %H:%M:%S")
# Remove students without 2 measurements. There was one student who took the PLIC four
# times at two separate times, so I removed them for simplicity
student.trt.df <- as.data.table(student.trt.df)[, N.measures := .N,
by = anon_student_id][N.measures == 2][,
.(anon_student_id, TotalScores, V4, Q1Bs, Q1Ds, Q1Es,
Q2Bs, Q2Ds, Q2Es, Q3Bs, Q3Ds, Q3Es, Q4Bs)]
print('# of students with more than one measurement')
length(unique(student.trt.df$anon_student_id))
print('Intraclass correlation: percent variance explained by group structure...')
r2(lmer(TotalScores ~ (1 | anon_student_id), student.trt.df))
# Convert data to wide form
student.trt.matched <- inner_join(student.trt.df, student.trt.df,
by = 'anon_student_id', suffix = c('.x', '.y')) %>%
mutate(abs.diff = abs(TotalScores.y - TotalScores.x)) %>%
filter((abs.diff != 0) & !duplicated(abs.diff)) %>%
select(-abs.diff)
print('# of pairs of measurements')
nrow(student.trt.matched)
student.trt.matched$Time.between <- student.trt.matched$V4.y - student.trt.matched$V4.x
print('Time between measurements...')
median(as.numeric(student.trt.matched$Time.between), na.rm = TRUE)/60
min(as.numeric(student.trt.matched$Time.between), na.rm = TRUE)
max(as.numeric(student.trt.matched$Time.between), na.rm = TRUE)/(60 * 24)
print('Correlation between two measurements...')
cor.test(student.trt.matched$TotalScores.x, student.trt.matched$TotalScores.y)
# cor.questions <- function(df, Q){
#   print(Q)
#   cor.test(df[, paste(Q, 'x', sep = '.')], df[, paste(Q, 'y', sep = '.')])
# }
#
# sapply(c('Q1Bs', 'Q1Ds', 'Q1Es', 'Q2Bs', 'Q2Ds',
#          'Q2Es', 'Q3Bs', 'Q3Ds', 'Q3Es', 'Q4Bs'), cor.questions, df = student.trt.matched)
# Scatter plot of scores
ggplot(student.trt.matched, aes(x = TotalScores.x, y = TotalScores.y)) +
geom_point() +
labs(x = 'First score', y = 'Second score')
# theme_set(theme_classic(base_size = 13))
# Bland-Altman plot comparing differences to baseline
p <- bland.altman.plot(student.trt.matched$TotalScores.x,
student.trt.matched$TotalScores.y, graph.sys = 'ggplot2')
print(p + labs(x = 'Mean score', y = 'First score - Second score'))
# Get aggregated class-level data, remove classes with less than five students
class.pre.dt <- data.table(full.df)[, {N.students = sum(!is.na(PreScores))
avg.pre = mean(PreScores, na.rm = TRUE)
std.pre = sd(PreScores,
na.rm = TRUE)/sqrt(N.students)
list(N.students = N.students, avg.pre = avg.pre,
std.pre = std.pre)},
.(Class_ID,
anon_course_id)][!is.na(avg.pre) & (N.students > 5),
N.courses := .N,
by = anon_course_id][N.courses > 1]
print('# of courses with more than one class...')
length(unique(class.pre.dt$anon_course_id))
print('Intraclass correlation: percent variance explained by group structure...')
r2(lmer(avg.pre ~ (1 | anon_course_id), class.pre.dt))
# Convert to wide form
class.pre.matched <- inner_join(class.pre.dt[, c('Class_ID', 'anon_course_id', 'avg.pre',
'std.pre')],
class.pre.dt[, c('Class_ID', 'anon_course_id', 'avg.pre',
'std.pre')], by = 'anon_course_id',
suffix = c('.x', '.y')) %>%
mutate(abs.diff = abs(avg.pre.y - avg.pre.x)) %>%
filter((Class_ID.x != Class_ID.y) & !duplicated(abs.diff)) %>%
select(-abs.diff)
print('# of pairs of classes')
nrow(class.pre.matched)
print('Correlation between all pairs of classes from the same course')
cor(class.pre.matched$avg.pre.x, class.pre.matched$avg.pre.y)
# Scatter plot of pairs of average pretest scores
ggplot(class.pre.matched, aes(x = avg.pre.x, y = avg.pre.y)) +
geom_point() +
geom_errorbar(aes(ymin = avg.pre.y - std.pre.y, ymax = avg.pre.y + std.pre.y)) +
geom_errorbarh(aes(xmin = avg.pre.x - std.pre.x, xmax = avg.pre.x + std.pre.x)) +
labs(x = 'Mean pretest score of first class', y = 'Mean pretest score of second class')
# Bland-Altman plot comparing differences to baseline
p <- bland.altman.plot(class.pre.matched$avg.pre.x,
class.pre.matched$avg.pre.y, graph.sys = 'ggplot2')
print(p + labs(x = 'Mean of measurements', y = 'Difference of measurements'))
full.df
colnames(full.df) %like% 's_x'
colnames(full.df)[colnames(full.df) %like% 's_x']
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']]
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt()
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt(variable.name = 'Item', value.name = 'Score')
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score), SE = sd(Score)/sqrt(n()))
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n()))
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n())) %>%
mutate(Item = Item[1:3])
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n())) %>%
rowwise() %>%
mutate(Item = Item[1:3])
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n())) %>%
rowwise() %>%
mutate(test = Item[1:3])
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n())) %>%
rowwise() %>%
mutate(test = substr(Item, 1, 3))
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n())) %>%
rowwise() %>%
mutate(Item = substr(Item, 1, 3))
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n())) %>%
rowwise() %>%
mutate(Item = substr(Item, 1, 3),
Test = 'PRE')
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n()), N = n()) %>%
rowwise() %>%
mutate(Item = substr(Item, 1, 3),
Test = 'PRE')
full.df[, colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
filter(!is.na(PreScores)) %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n()), N = n()) %>%
rowwise() %>%
mutate(Item = substr(Item, 1, 3),
Test = 'PRE')
full.df[!is.na(full.df$PreScores), colnames(full.df)[colnames(full.df) %like% 's_x']] %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n()), N = n()) %>%
rowwise() %>%
mutate(Item = substr(Item, 1, 3),
Test = 'PRE')
Question.stats <- function(df, test){
if(test == 'PRE'){
df.q <- df[!is.na(df$PreScores), colnames(df)[colnames(df) %like% 's_x']]
} else {
df.q <- df[!is.na(df$PostScores), colnames(df)[colnames(df) %like% 's_y']]
}
df.q <- df %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n()), N = n()) %>%
rowwise() %>%
mutate(Item = substr(Item, 1, 3),
Test = test)
}
df.q <- rbind(Question.stats(full.df, 'PRE'), Question.stats(full.df, 'POST'))
df.q
Question.stats(full.df, 'PRE')
Question.stats <- function(df, test){
if(test == 'PRE'){
df.q <- df[!is.na(df$PreScores), colnames(df)[colnames(df) %like% 's_x']]
} else {
df.q <- df[!is.na(df$PostScores), colnames(df)[colnames(df) %like% 's_y']]
}
df.q <- df.q %>%
melt(variable.name = 'Item', value.name = 'Score') %>%
group_by(Item) %>%
summarize(Average = mean(Score, na.rm = TRUE), SE = sd(Score, na.rm = TRUE)/sqrt(n()), N = n()) %>%
rowwise() %>%
mutate(Item = substr(Item, 1, 3),
Test = test)
}
df.q <- rbind(Question.stats(full.df, 'PRE'), Question.stats(full.df, 'POST'))
df.q
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point() +
geom_errorbar(aes(ymin = Average - SE, ymax = Average + SE))
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
geom_errorbar(aes(ymin = Average - SE, ymax = Average + SE))
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
geom_errorbar(aes(ymin = Average - SE, ymax = Average + SE), size = 1)
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
geom_errorbar(aes(ymin = Average - SE, ymax = Average + SE), width = 1)
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
geom_errorbar(aes(ymin = Average - SE, ymax = Average + SE), width = 0.4)
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
geom_errorbar(aes(ymin = Average - SE, ymax = Average + SE), width = 0.4, size = 1)
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = Average - SE, ymax = Average + SE), width = 0.4, size = 1)
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
geom_errorbar(aes(ymin = Average - SE, ymax = Average + SE), width = 0.4, size = 1)
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#1b9e77', '#7570b3'))
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#d95f02', '#7570b3'))
df.q <- rbind(Question.stats(full.df, 'PRE'), Question.stats(full.df, 'POST')) %>%
mutate(Test = relevel(factor(Test), levels = c('PRE', 'POST')))
df.q <- rbind(Question.stats(full.df, 'PRE'), Question.stats(full.df, 'POST')) %>%
mutate(Test = factor(Test, levels = c('PRE', 'POST')))
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#d95f02', '#7570b3'))
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#d95f02', '#7570b3')) +
labs(y = 'Average score')
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#d95f02', '#7570b3'), labels = c('TEST1', 'TEST2')) +
labs(y = 'Average score')
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#d95f02', '#7570b3'), labels = c('TEST1', 'TEST2')) +
scale_shape_manual(labels = c('TEST1', 'TEST2')) +
labs(y = 'Average score')
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#d95f02', '#7570b3'), labels = c('TEST1', 'TEST2')) +
#scale_shape_manual(labels = c('TEST1', 'TEST2')) +
labs(y = 'Average score')
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#d95f02', '#7570b3'), labels = c('TEST1', 'TEST2')) +
scale_shape_manual(values = c(1, 2), labels = c('TEST1', 'TEST2')) +
labs(y = 'Average score')
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#d95f02', '#7570b3')) +
labs(y = 'Average score')
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#d95f02', '#7570b3')) +
labs(y = 'Average score', color = '', shape = '')
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#d95f02', '#7570b3')) +
labs(y = 'Average score', color = 'Time', shape = 'Time')
ggplot(df.q, aes(x = Item, y = Average, group = Test, color = Test, shape = Test)) +
geom_point(size = 4) +
scale_color_manual(values = c('#d95f02', '#7570b3')) +
labs(y = 'Average score')
full.df[, c('PreScores', 'PostScores')] %>%
`colnames()<-`c('PRE', 'POST') %>%
full.df[, c('PreScores', 'PostScores')] %>%
`colnames()<-`(c('PRE', 'POST')) %>%
melt(variable.name = 'Test', value.name = 'Score')
full.df[, c('PreScores', 'PostScores')] %>%
`colnames<-`(c('PRE', 'POST')) %>%
melt(variable.name = 'Test', value.name = 'Score')
ggplot(full.df[, c('PreScores', 'PostScores')] %>%
`colnames<-`(c('PRE', 'POST')) %>%
melt(variable.name = 'Test', value.name = 'Score'), aes(x = Score, group = Test,
color = Test)) +
geom_hist()
ggplot(full.df[, c('PreScores', 'PostScores')] %>%
`colnames<-`(c('PRE', 'POST')) %>%
melt(variable.name = 'Test', value.name = 'Score'), aes(x = Score, group = Test,
color = Test)) +
geom_histogram()
ggplot(full.df[, c('PreScores', 'PostScores')] %>%
`colnames<-`(c('PRE', 'POST')) %>%
melt(variable.name = 'Test', value.name = 'Score'), aes(x = Score, group = Test,
color = Test)) +
geom_density()
ggplot(full.df[, c('PreScores', 'PostScores')] %>%
`colnames<-`(c('PRE', 'POST')) %>%
melt(variable.name = 'Test', value.name = 'Score'), aes(x = Score, group = Test,
color = Test,
fill = Test)) +
geom_density()
ggplot(full.df[, c('PreScores', 'PostScores')] %>%
`colnames<-`(c('PRE', 'POST')) %>%
melt(variable.name = 'Test', value.name = 'Score'), aes(x = Score, group = Test,
color = Test)) +
geom_density() +
geom_vline(data=., aes(xintercept=grp.mean, color=Test),
linetype="dashed")
ggplot(full.df[, c('PreScores', 'PostScores')] %>%
`colnames<-`(c('PRE', 'POST')) %>%
melt(variable.name = 'Test', value.name = 'Score'), aes(x = Score, group = Test,
fill = Test)) +
geom_density(alpha = 0.4)
ggplot(full.df[, c('PreScores', 'PostScores')] %>%
`colnames<-`(c('PRE', 'POST')) %>%
melt(variable.name = 'Test', value.name = 'Score'), aes(x = Score, group = Test,
fill = Test)) +
geom_density(alpha = 0.4) +
scale_fill_manual(values = c('#d95f02', '#7570b3'))
