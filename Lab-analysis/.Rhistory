Q33 == 'Develop lab skills.' ~ 'Skills-based',
TRUE ~ NA_character_
),
Course.level = case_when(
Q18 == 'Beyond the first year lab' ~ 'BFY',
Q27 == 'Calculus-based' ~ 'FY.Calc',
Q27 == 'Algebra-based' ~ 'FY.Alg',
TRUE ~ NA_character_
))
full.df <- data.table(full.df)[, `:=`(N.students = .N,
pre.rate = sum(!is.na(student.score.pre))/.N,
post.rate = sum(!is.na(student.score.post))/.N),
.(ResponseId.CIS)] %>%
data.frame()
# remove whole classes without type and/or level information
complete.df <- full.df %>%
filter(!is.na(Lab.type) & !is.na(Course.level) & (pre.rate > 0) & (post.rate > 0))
# get matched dataset
df.matched <- complete.df %>%
filter(!is.na(student.score.pre) & !is.na(student.score.post))
data.frame(N.student.records = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) nrow(x))),
N.students = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) length(unique(x[,
'anon_student_id'])))),
N.classes = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) length(unique(x[, 'ResponseId.CIS'])))),
N.institutions = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) length(unique(x[,
'anon_university_id'])))), row.names = c('full dataset', 'course info', 'matched'))
# Breakdown of institution type, course level, and lab type
table(df.matched[!duplicated(df.matched$anon_university_id),]$Q15, exclude = NULL)
table(df.matched[!duplicated(df.matched$ResponseId.CIS),]$Course.level, exclude = NULL)
table(df.matched[!duplicated(df.matched$ResponseId.CIS),]$Lab.type, exclude = NULL)
# replace declared major with intended major in cases where students intend to switch
df.matched[is.na(df.matched$Q48) | (df.matched$Q48 == 0),
'Q48'] <- df.matched[is.na(df.matched$Q48) | (df.matched$Q48 == 0), 'Q47']
# mutate and combine categories
df.matched <- df.matched %>%
mutate(Major = case_when(
Q48 == 1 ~ 'Physics',
Q48 == 2 ~ 'Chemistry',
Q48 == 3 ~ 'Biochemistry',
Q48 == 4 ~ 'Biology',
Q48 == 5 ~ 'Engineering',
Q48 == 6 ~ 'Engineering Physics',
Q48 == 7 ~ 'Astronomy',
Q48 == 8 ~ 'Astrophysics',
Q48 == 9 ~ 'Geology/geophysics',
Q48 == 10 ~ 'Math/applied math',
Q48 == 11 ~ 'Computer science',
Q48 == 12 ~ 'Physiology',
Q48 == 13 ~ 'Other science',
Q48 == 14 ~ 'Non-science',
Q48 == 15 ~ 'Open/undeclared',
TRUE ~ 'Unknown'
),
Gender = case_when(
Q54 == 1 ~ 'Woman',
Q54 == 2 ~ 'Man',
Q54 == 3 ~ 'Other',
TRUE ~ 'Unknown'
)) %>%
mutate(Major = case_when(
(Major == 'Physics') | (Major == 'Engineering Physics') | (Major == 'Astronomy') |
(Major == 'Astrophysics') ~ 'Physics',
(Major == 'Chemistry') | (Major == 'Biochemistry') | (Major == 'Biology') |
(Major == 'Physiology') ~ 'Chem.LifeSci',
Major == 'Engineering' ~ 'Engineering',
(Major == 'Math/applied math') | (Major == 'Computer science') ~ 'Math.CS',
(Major == 'Geology/geophysics') | (Major == 'Other science') ~ 'OtherSci',
Major == 'Non-science' ~ 'NonSci',
Major == 'Open/undeclared' ~ 'Undeclared',
Major == 'Unknown' ~ 'Unknown',
TRUE ~ NA_character_
)) %>% # set reference levels for factors...important for regressions
mutate(Major = relevel(as.factor(Major), ref = 'Physics'),
Gender = relevel(as.factor(Gender), ref = 'Man'),
Lab.goal = relevel(as.factor(Lab.type), ref = 'Concepts-based'),
Lab.level = relevel(as.factor(Course.level), ref = 'FY.Alg'))
# rename race columns
new.race.cols <- c('Race.ethnicity.Other', 'Race.ethnicity.Black',
'Race.ethnicity.Hispanic', 'Race.ethnicity.Asian',
'Race.ethnicity.White', 'Race.ethnicity.Unknown', 'Race.ethnicity.AmInd',
'Race.ethnicity.NatHawaii')
setnames(df.matched, old = c('Q52_7', 'Q52_3', 'Q52_4', 'Q52_2', 'Q52_6',
'race_unknown', 'Q52_5', 'Q52_1'), new = new.race.cols)
# fill all NAs with zero and set factors to binary
df.matched[is.na(df.matched)] <- 0
df.matched[new.race.cols] <- lapply(df.matched[new.race.cols], factor, levels = c(0, 1))
Race.ethnicity.cols <- names(df.matched)[names(df.matched) %like% 'Race']
Race.ethnicity.table <- function(df, Lab.Purpose = FALSE){
# race/ethnicity variables are not independent...this function calculates tables for
# each of those variables
if(Lab.Purpose){
for(col in Race.ethnicity.cols){
print(col)
print(table(df[, col], df$Lab.goal))
}
} else {
for(col in Race.ethnicity.cols){
print(col)
print(table(df[, col]))
}
}
}
# get demographic breakdowns across lab type
table(df.matched$Gender)
Race.ethnicity.table(df.matched)
table(df.matched$Lab.goal)
table(df.matched$Gender, df.matched$Lab.goal)
Race.ethnicity.table(df.matched, Lab.Purpose = TRUE)
plot.pre.post <- function(df, var){
# plot pre-post score shifts on overall student scores
if(var == 'Race.ethnicity'){
# race/ethnicity variables aren't independent, so we melt twice...first to put
# pre-post scores in long form
df.long <- reshape2::melt(df.matched, id.vars = new.race.cols,
measure.vars = c('student.score.pre', 'student.score.post'),
variable.name = 'Time', value.name = 'Score') %>%
# ...then again to put race/ethnicity in long form
reshape2::melt(., measure.vars = new.race.cols,
id.vars = c('Time', 'Score'), variable.name = 'Race.ethnicity') %>%
filter(value == 1) %>%
select(Time, Score, Race.ethnicity) %>%
rowwise() %>% # rowwise split the characters in the column to get nice tick labels
mutate(Race.ethnicity = strsplit(as.character(Race.ethnicity), '\\.')[[1]][3])
} else {
# we only need to put the scores in long form since the gender/lab type variables are
# already long
df.long <- reshape2::melt(df, measure.vars = c('student.score.pre',
'student.score.post'),
variable.name = 'Time', value.name = 'Score')
}
p <- ggplot(df.long, aes_string(x = var, y = 'Score', group = 'Time', color = 'Time'))
add_summary(p, fun = 'mean_se', group = c('Time')) +
scale_color_manual(labels = c('pre', 'post'), values = c('#2271B2', '#D55E00')) +
theme(axis.text.x = element_text(angle = 90))
}
plot.pre.post(df.matched, 'Gender')
plot.pre.post(df.matched, 'Race.ethnicity')
plot.pre.post(df.matched, 'Lab.type')
# fit null model with random intercepts for class and institution
# this model measures the interclass correlation coefficient (ICC)
mod0 <- lmer(student.score.post ~ (1 | anon_university_id/ResponseId.CIS), df.matched)
r2(mod0)
# fit model of interest
mod <- lmer(student.score.post ~ student.score.pre + Course.level + Lab.type *
(Gender + Race.ethnicity.AmInd + Race.ethnicity.NatHawaii +
Race.ethnicity.Other + Race.ethnicity.Black + Race.ethnicity.Hispanic +
Race.ethnicity.Asian + Race.ethnicity.White + Race.ethnicity.Unknown) +
Major + (1 | anon_university_id/ResponseId.CIS), df.matched)
summary(mod)
# get standardized coefficients, grand-mean-centering continuous variables
noStandard.cols <- c('Lab.type', 'Course.level', 'Major', 'Gender',
names(df.matched)[names(df.matched) %like% "Race"])
class(mod) <- "lmerMod"
mod.std <- beta(mod, skip = noStandard.cols)
vif(mod) # variance inflation factors
# fitted values versus residuals...should be no trend
plot(mod, xlab = 'Fitted values', ylab = 'Residuals')
qqmath(mod) # standardized residuals versus standard quantiles
rownames(mod.std$coefficients)[2] <- 'student.score.pre'
stargazer(mod, mod, mod, mod, coef = list(summary(mod)$coefficients[, 1],
summary(mod)$coefficients[, 2],
mod.std$coefficients[, 1],
mod.std$coefficients[, 2]),
se = list(summary(mod)$coefficients[, 2], NA, mod.std$coefficients[, 2], NA),
type='text', intercept.bottom = FALSE, style = 'asr', keep.stat = c('n'),
column.labels = c('Beta', 'SE', 'Beta.std', 'SE'), model.numbers = FALSE)#,
library(easypackages)
libraries('tidyverse', 'data.table', 'reshape2', 'ggpubr', 'lmerTest', 'reghelper', 'car',
'lattice', 'sjstats', 'sjPlot', 'gridExtra', 'stargazer', 'lavaan', 'semPlot',
'psych')
theme_set(theme_classic(base_size = 14)) # set font size for ggplot
Read.Score <- function(file){
# read master E-CLASS file and calculate total scores on student and expert questions
dt <- fread(file)
# columns with students responses end in a (student Qs) or b (expert Qs)...get those
answers.cols <- names(dt)[grep('(a|b)$', names(dt))]
# correct answers marked as 5, incorrect as 1, and neutral as 0...map to +/- 1 and 0
dt[, (answers.cols) := lapply(.SD, function(x) case_when(x == 5 ~ 1,
x == 1 ~ -1,
TRUE ~ 0)),
.SDcols = answers.cols]
df <- dt[, -c('q40a', 'q40b')] # q40 was a filter question, no part of scoring
# sum student/expert scores
df$student.score <- rowSums(df %>% select(grep("a$", names(.))))
df$expert.score <- rowSums(df %>% select(grep("b$", names(.))))
return(df)
}
# read course information survey (CIS) and pre/post survey data
cis.df <- read.csv('C:/Users/Cole/Documents/GRA_Summer2020/eclass-public-analysis/anon_cis_CW.csv')
pre.df <- Read.Score('C:/Users/Cole/Documents/GRA_Summer2020/eclass-public-analysis/anon_pre.csv')
# join CIS on presurvey
cis.pre.df <- right_join(cis.df, pre.df, by = c('pre_survey_id' = 'survey_id'),
suffix = c('.CIS', '.pre'))
post.df <- Read.Score('C:/Users/Cole/Documents/GRA_Summer2020/eclass-public-analysis/anon_post.csv')
# join presurveys (with CIS) on postsurveys...full join keeps unmatched surveys
full.df <- full_join(cis.pre.df, post.df, by = c('post_survey_id' = 'survey_id',
'anon_student_id'),
suffix = c('.pre', '.post'))
# mutate lab type and course level info from CIS
full.df <- full.df %>%
mutate(Lab.type = case_when(
Q33 == 'Reinforce physics concepts.' ~ 'Concepts-based',
Q33 == 'Both about equally.' ~ 'Mixed',
Q33 == 'Develop lab skills.' ~ 'Skills-based',
TRUE ~ NA_character_
),
Course.level = case_when(
Q18 == 'Beyond the first year lab' ~ 'BFY',
Q27 == 'Calculus-based' ~ 'FY.Calc',
Q27 == 'Algebra-based' ~ 'FY.Alg',
TRUE ~ NA_character_
))
full.df <- data.table(full.df)[, `:=`(N.students = .N,
pre.rate = sum(!is.na(student.score.pre))/.N,
post.rate = sum(!is.na(student.score.post))/.N),
.(ResponseId.CIS)] %>%
data.frame()
# remove whole classes without type and/or level information
complete.df <- full.df %>%
filter(!is.na(Lab.type) & !is.na(Course.level) & (pre.rate > 0) & (post.rate > 0))
# get matched dataset
df.matched <- complete.df %>%
filter(!is.na(student.score.pre) & !is.na(student.score.post))
data.frame(N.student.records = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) nrow(x))),
N.students = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) length(unique(x[,
'anon_student_id'])))),
N.classes = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) length(unique(x[, 'ResponseId.CIS'])))),
N.institutions = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) length(unique(x[,
'anon_university_id'])))), row.names = c('full dataset', 'course info', 'matched'))
# Breakdown of institution type, course level, and lab type
table(df.matched[!duplicated(df.matched$anon_university_id),]$Q15, exclude = NULL)
table(df.matched[!duplicated(df.matched$ResponseId.CIS),]$Course.level, exclude = NULL)
table(df.matched[!duplicated(df.matched$ResponseId.CIS),]$Lab.type, exclude = NULL)
# replace declared major with intended major in cases where students intend to switch
df.matched[is.na(df.matched$Q48) | (df.matched$Q48 == 0),
'Q48'] <- df.matched[is.na(df.matched$Q48) | (df.matched$Q48 == 0), 'Q47']
# mutate and combine categories
df.matched <- df.matched %>%
mutate(Major = case_when(
Q48 == 1 ~ 'Physics',
Q48 == 2 ~ 'Chemistry',
Q48 == 3 ~ 'Biochemistry',
Q48 == 4 ~ 'Biology',
Q48 == 5 ~ 'Engineering',
Q48 == 6 ~ 'Engineering Physics',
Q48 == 7 ~ 'Astronomy',
Q48 == 8 ~ 'Astrophysics',
Q48 == 9 ~ 'Geology/geophysics',
Q48 == 10 ~ 'Math/applied math',
Q48 == 11 ~ 'Computer science',
Q48 == 12 ~ 'Physiology',
Q48 == 13 ~ 'Other science',
Q48 == 14 ~ 'Non-science',
Q48 == 15 ~ 'Open/undeclared',
TRUE ~ 'Unknown'
),
Gender = case_when(
Q54 == 1 ~ 'Woman',
Q54 == 2 ~ 'Man',
Q54 == 3 ~ 'Other',
TRUE ~ 'Unknown'
)) %>%
mutate(Major = case_when(
(Major == 'Physics') | (Major == 'Engineering Physics') | (Major == 'Astronomy') |
(Major == 'Astrophysics') ~ 'Physics',
(Major == 'Chemistry') | (Major == 'Biochemistry') | (Major == 'Biology') |
(Major == 'Physiology') ~ 'Chem.LifeSci',
Major == 'Engineering' ~ 'Engineering',
(Major == 'Math/applied math') | (Major == 'Computer science') ~ 'Math.CS',
(Major == 'Geology/geophysics') | (Major == 'Other science') ~ 'OtherSci',
Major == 'Non-science' ~ 'NonSci',
Major == 'Open/undeclared' ~ 'Undeclared',
Major == 'Unknown' ~ 'Unknown',
TRUE ~ NA_character_
)) %>% # set reference levels for factors...important for regressions
mutate(Major = relevel(as.factor(Major), ref = 'Physics'),
Gender = relevel(as.factor(Gender), ref = 'Man'),
Lab.type = relevel(as.factor(Lab.type), ref = 'Concepts-based'),
Course.level = relevel(as.factor(Course.level), ref = 'FY.Alg'))
# rename race columns
new.race.cols <- c('Race.ethnicity.Other', 'Race.ethnicity.Black',
'Race.ethnicity.Hispanic', 'Race.ethnicity.Asian',
'Race.ethnicity.White', 'Race.ethnicity.Unknown', 'Race.ethnicity.AmInd',
'Race.ethnicity.NatHawaii')
setnames(df.matched, old = c('Q52_7', 'Q52_3', 'Q52_4', 'Q52_2', 'Q52_6',
'race_unknown', 'Q52_5', 'Q52_1'), new = new.race.cols)
# fill all NAs with zero and set factors to binary
df.matched[is.na(df.matched)] <- 0
df.matched[new.race.cols] <- lapply(df.matched[new.race.cols], factor, levels = c(0, 1))
Race.ethnicity.cols <- names(df.matched)[names(df.matched) %like% 'Race']
Race.ethnicity.table <- function(df, Lab.Purpose = FALSE){
# race/ethnicity variables are not independent...this function calculates tables for
# each of those variables
if(Lab.Purpose){
for(col in Race.ethnicity.cols){
print(col)
print(table(df[, col], df$Lab.goal))
}
} else {
for(col in Race.ethnicity.cols){
print(col)
print(table(df[, col]))
}
}
}
# get demographic breakdowns across lab type
table(df.matched$Gender)
Race.ethnicity.table(df.matched)
table(df.matched$Lab.goal)
table(df.matched$Gender, df.matched$Lab.goal)
library(easypackages)
libraries('tidyverse', 'data.table', 'reshape2', 'ggpubr', 'lmerTest', 'reghelper', 'car',
'lattice', 'sjstats', 'sjPlot', 'gridExtra', 'stargazer', 'lavaan', 'semPlot',
'psych')
theme_set(theme_classic(base_size = 14)) # set font size for ggplot
Read.Score <- function(file){
# read master E-CLASS file and calculate total scores on student and expert questions
dt <- fread(file)
# columns with students responses end in a (student Qs) or b (expert Qs)...get those
answers.cols <- names(dt)[grep('(a|b)$', names(dt))]
# correct answers marked as 5, incorrect as 1, and neutral as 0...map to +/- 1 and 0
dt[, (answers.cols) := lapply(.SD, function(x) case_when(x == 5 ~ 1,
x == 1 ~ -1,
TRUE ~ 0)),
.SDcols = answers.cols]
df <- dt[, -c('q40a', 'q40b')] # q40 was a filter question, no part of scoring
# sum student/expert scores
df$student.score <- rowSums(df %>% select(grep("a$", names(.))))
df$expert.score <- rowSums(df %>% select(grep("b$", names(.))))
return(df)
}
# read course information survey (CIS) and pre/post survey data
cis.df <- read.csv('C:/Users/Cole/Documents/GRA_Summer2020/eclass-public-analysis/anon_cis_CW.csv')
pre.df <- Read.Score('C:/Users/Cole/Documents/GRA_Summer2020/eclass-public-analysis/anon_pre.csv')
# join CIS on presurvey
cis.pre.df <- right_join(cis.df, pre.df, by = c('pre_survey_id' = 'survey_id'),
suffix = c('.CIS', '.pre'))
post.df <- Read.Score('C:/Users/Cole/Documents/GRA_Summer2020/eclass-public-analysis/anon_post.csv')
# join presurveys (with CIS) on postsurveys...full join keeps unmatched surveys
full.df <- full_join(cis.pre.df, post.df, by = c('post_survey_id' = 'survey_id',
'anon_student_id'),
suffix = c('.pre', '.post'))
# mutate lab type and course level info from CIS
full.df <- full.df %>%
mutate(Lab.type = case_when(
Q33 == 'Reinforce physics concepts.' ~ 'Concepts-based',
Q33 == 'Both about equally.' ~ 'Mixed',
Q33 == 'Develop lab skills.' ~ 'Skills-based',
TRUE ~ NA_character_
),
Course.level = case_when(
Q18 == 'Beyond the first year lab' ~ 'BFY',
Q27 == 'Calculus-based' ~ 'FY.Calc',
Q27 == 'Algebra-based' ~ 'FY.Alg',
TRUE ~ NA_character_
))
full.df <- data.table(full.df)[, `:=`(N.students = .N,
pre.rate = sum(!is.na(student.score.pre))/.N,
post.rate = sum(!is.na(student.score.post))/.N),
.(ResponseId.CIS)] %>%
data.frame()
# remove whole classes without type and/or level information
complete.df <- full.df %>%
filter(!is.na(Lab.type) & !is.na(Course.level) & (pre.rate > 0) & (post.rate > 0))
# get matched dataset
df.matched <- complete.df %>%
filter(!is.na(student.score.pre) & !is.na(student.score.post))
data.frame(N.student.records = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) nrow(x))),
N.students = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) length(unique(x[,
'anon_student_id'])))),
N.classes = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) length(unique(x[, 'ResponseId.CIS'])))),
N.institutions = unlist(lapply(list(full.df, complete.df, df.matched),
function(x) length(unique(x[,
'anon_university_id'])))), row.names = c('full dataset', 'course info', 'matched'))
# Breakdown of institution type, course level, and lab type
table(df.matched[!duplicated(df.matched$anon_university_id),]$Q15, exclude = NULL)
table(df.matched[!duplicated(df.matched$ResponseId.CIS),]$Course.level, exclude = NULL)
table(df.matched[!duplicated(df.matched$ResponseId.CIS),]$Lab.type, exclude = NULL)
# replace declared major with intended major in cases where students intend to switch
df.matched[is.na(df.matched$Q48) | (df.matched$Q48 == 0),
'Q48'] <- df.matched[is.na(df.matched$Q48) | (df.matched$Q48 == 0), 'Q47']
# mutate and combine categories
df.matched <- df.matched %>%
mutate(Major = case_when(
Q48 == 1 ~ 'Physics',
Q48 == 2 ~ 'Chemistry',
Q48 == 3 ~ 'Biochemistry',
Q48 == 4 ~ 'Biology',
Q48 == 5 ~ 'Engineering',
Q48 == 6 ~ 'Engineering Physics',
Q48 == 7 ~ 'Astronomy',
Q48 == 8 ~ 'Astrophysics',
Q48 == 9 ~ 'Geology/geophysics',
Q48 == 10 ~ 'Math/applied math',
Q48 == 11 ~ 'Computer science',
Q48 == 12 ~ 'Physiology',
Q48 == 13 ~ 'Other science',
Q48 == 14 ~ 'Non-science',
Q48 == 15 ~ 'Open/undeclared',
TRUE ~ 'Unknown'
),
Gender = case_when(
Q54 == 1 ~ 'Woman',
Q54 == 2 ~ 'Man',
Q54 == 3 ~ 'Other',
TRUE ~ 'Unknown'
)) %>%
mutate(Major = case_when(
(Major == 'Physics') | (Major == 'Engineering Physics') | (Major == 'Astronomy') |
(Major == 'Astrophysics') ~ 'Physics',
(Major == 'Chemistry') | (Major == 'Biochemistry') | (Major == 'Biology') |
(Major == 'Physiology') ~ 'Chem.LifeSci',
Major == 'Engineering' ~ 'Engineering',
(Major == 'Math/applied math') | (Major == 'Computer science') ~ 'Math.CS',
(Major == 'Geology/geophysics') | (Major == 'Other science') ~ 'OtherSci',
Major == 'Non-science' ~ 'NonSci',
Major == 'Open/undeclared' ~ 'Undeclared',
Major == 'Unknown' ~ 'Unknown',
TRUE ~ NA_character_
)) %>% # set reference levels for factors...important for regressions
mutate(Major = relevel(as.factor(Major), ref = 'Physics'),
Gender = relevel(as.factor(Gender), ref = 'Man'),
Lab.type = relevel(as.factor(Lab.type), ref = 'Concepts-based'),
Course.level = relevel(as.factor(Course.level), ref = 'FY.Alg'))
# rename race columns
new.race.cols <- c('Race.ethnicity.Other', 'Race.ethnicity.Black',
'Race.ethnicity.Hispanic', 'Race.ethnicity.Asian',
'Race.ethnicity.White', 'Race.ethnicity.Unknown', 'Race.ethnicity.AmInd',
'Race.ethnicity.NatHawaii')
setnames(df.matched, old = c('Q52_7', 'Q52_3', 'Q52_4', 'Q52_2', 'Q52_6',
'race_unknown', 'Q52_5', 'Q52_1'), new = new.race.cols)
# fill all NAs with zero and set factors to binary
df.matched[is.na(df.matched)] <- 0
df.matched[new.race.cols] <- lapply(df.matched[new.race.cols], factor, levels = c(0, 1))
Race.ethnicity.cols <- names(df.matched)[names(df.matched) %like% 'Race']
Race.ethnicity.table <- function(df, Lab.Purpose = FALSE){
# race/ethnicity variables are not independent...this function calculates tables for
# each of those variables
if(Lab.Purpose){
for(col in Race.ethnicity.cols){
print(col)
print(table(df[, col], df$Lab.goal))
}
} else {
for(col in Race.ethnicity.cols){
print(col)
print(table(df[, col]))
}
}
}
# get demographic breakdowns across lab type
table(df.matched$Gender)
Race.ethnicity.table(df.matched)
table(df.matched$Lab.goal)
table(df.matched$Gender, df.matched$Lab.goal)
rownames(mod.std$coefficients)[2] <- 'student.score.pre'
stargazer(mod, mod, mod, mod, coef = list(summary(mod)$coefficients[, 1],
summary(mod)$coefficients[, 2],
mod.std$coefficients[, 1],
mod.std$coefficients[, 2]),
se = list(summary(mod)$coefficients[, 2], NA, mod.std$coefficients[, 2], NA),
type='text', intercept.bottom = FALSE, style = 'asr', keep.stat = c('n'),
column.labels = c('Beta', 'SE', 'Beta.std', 'SE'), model.numbers = FALSE)#,
rownames(mod.std$coefficients)[2] <- 'student.score.pre'
stargazer(mod, mod, mod, mod, coef = list(summary(mod)$coefficients[, 1],
summary(mod)$coefficients[, 2],
mod.std$coefficients[, 1],
mod.std$coefficients[, 2]),
se = list(summary(mod)$coefficients[, 2], NA, mod.std$coefficients[, 2], NA),
type='text', intercept.bottom = FALSE, style = 'asr', keep.stat = c('n'),
column.labels = c('Beta', 'SE', 'Beta.std', 'SE'), model.numbers = FALSE)#,
libraries('tidyverse', 'data.table', 'reshape2', 'ggpubr', 'lmerTest', 'reghelper', 'car',
'lattice', 'sjstats', 'sjPlot', 'gridExtra', 'stargazer', 'lavaan', 'semPlot',
'psych')
library(easypackages)
libraries('tidyverse', 'data.table', 'reshape2', 'ggpubr', 'lmerTest', 'reghelper', 'car',
'lattice', 'sjstats', 'sjPlot', 'gridExtra', 'stargazer', 'lavaan', 'semPlot',
'psych')
theme_set(theme_classic(base_size = 14)) # set font size for ggplot
Read.Score <- function(file){
# read master E-CLASS file and calculate total scores on student and expert questions
dt <- fread(file)
# columns with students responses end in a (student Qs) or b (expert Qs)...get those
answers.cols <- names(dt)[grep('(a|b)$', names(dt))]
# correct answers marked as 5, incorrect as 1, and neutral as 0...map to +/- 1 and 0
dt[, (answers.cols) := lapply(.SD, function(x) case_when(x == 5 ~ 1,
x == 1 ~ -1,
TRUE ~ 0)),
.SDcols = answers.cols]
df <- dt[, -c('q40a', 'q40b')] # q40 was a filter question, no part of scoring
# sum student/expert scores
df$student.score <- rowSums(df %>% select(grep("a$", names(.))))
df$expert.score <- rowSums(df %>% select(grep("b$", names(.))))
return(df)
}
# read course information survey (CIS) and pre/post survey data
cis.df <- read.csv('C:/Users/Cole/Documents/GRA_Summer2020/eclass-public-analysis/anon_cis_CW.csv')
pre.df <- Read.Score('C:/Users/Cole/Documents/GRA_Summer2020/eclass-public-analysis/anon_pre.csv')
# join CIS on presurvey
cis.pre.df <- right_join(cis.df, pre.df, by = c('pre_survey_id' = 'survey_id'),
suffix = c('.CIS', '.pre'))
